version: 2.1

orbs:
  github-cli: circleci/github-cli@2.0.0

executors:
  # イメージのビルドの実行環境を提供します．
  build_executor:
    parameters:
      service_name:
        type: enum
        enum: [ "account", "customer", "orchestrator", "order" ]
    machine:
      image: ubuntu-2004:202107-02
    # イメージのプッシュの実行環境を提供します．
    environment:
      SERVICE_NAME: << parameters.service_name >>
  push_executor:
    parameters:
      service_name:
        type: enum
        enum: [ "account", "customer", "orchestrator", "order" ]
      vendor_name:
        type: enum
        enum: [ "fastapi", "gin", "lumen", "nginx" ]
    machine:
      image: ubuntu-2004:202107-02
    environment:
      SERVICE_NAME: << parameters.service_name >>
      VENDOR_NAME: << parameters.vendor_name >>
  # GitOpsの実行環境を提供します．
  create_pull_request_for_gitops_executor:
    parameters:
      service_name:
        type: enum
        enum: [ "account", "customer", "orchestrator", "order" ]
      vendor_name:
        type: enum
        enum: [ "fastapi", "gin", "lumen", "nginx" ]
    docker:
      - image: cimg/base:2022.03
    environment:
      VENDOR_NAME: << parameters.vendor_name >>

commands:
  # 環境変数を準備します．
  setup_env_files:
    steps:
      - run:
          name: Copy env file
          # NOTE: 移動するディレクトリを環境変数で設定するため，working_directoryオプションは用いない．
          command: |
            set -xe
            cd ./src/${SERVICE_NAME}
            cp .env.example .env

  # docker-compose configを実行します．
  docker_compose_config:
    steps:
      - run:
          name: Docker compose config
          # NOTE: 移動するディレクトリを環境変数で設定するため，working_directoryオプションは用いない．
          command: |
            set -xe
            cd ./src/${SERVICE_NAME}
            docker-compose config

  # docker-compose upを実行します．
  docker_compose_up:
    steps:
      - run:
          name: Docker compose run
          # NOTE: 移動するディレクトリを環境変数で設定するため，working_directoryオプションは用いない．
          command: |
            set -xe
            cd ./src/${SERVICE_NAME}
            docker-compose up -d

  # 環境変数からcredentialsファイルを用意します．
  setup_aws_credentials:
    steps:
      - run:
          name: Setup AWS credentials
          command:
            source ./ops/setup_aws_credentials.sh

  # イメージをtarファイルとして保存します．
  docker_save:
    steps:
      - run:
          name: Docker save image
          command: |
            docker save ${SERVICE_NAME}-${VENDOR_NAME} > image.tar.gz
            ls -la
      - persist_to_workspace:
          root: .
          paths:
            - .

jobs:
  # accountサービスのビルドを実行します．
  build_account:
    parameters:
      exr:
        type: executor
    executor: << parameters.exr >>
    steps:
      - checkout
      - setup_env_files
      - docker_compose_config
      - docker_compose_up
      - docker_save

  # accountサービスのビルドを実行します．
  build_customer:
    parameters:
      exr:
        type: executor
    executor: << parameters.exr >>
    steps:
      - checkout
      - setup_env_files
      - docker_compose_config
      - docker_compose_up
      - docker_save

  # orchestratorサービスのビルドを実行します．
  build_orchestrator:
    parameters:
      exr:
        type: executor
    executor: << parameters.exr >>
    steps:
      - checkout
      - setup_env_files
      - docker_compose_config
      - docker_compose_up
      - docker_save

  # orderサービスのビルドを実行します．
  build_order:
    parameters:
      exr:
        type: executor
    executor: << parameters.exr >>
    steps:
      - checkout
      - setup_env_files
      - docker_compose_config
      - docker_compose_up
      - docker_save

  # dockerイメージをプッシュを実行します．
  push:
    parameters:
      exr:
        type: executor
    executor: << parameters.exr >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Docker load image
          command: |
            ls -la
            docker load < image.tar.gz
      - run:
          name: Docker login
          command: |
            source ./ops/export_envs.sh
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_ACCOUNT_URL}
      - run:
          name: Docker push
          command: |
            source ./ops/export_envs.sh
            docker tag  ${SERVICE_NAME}-${VENDOR_NAME}:latest ${AWS_ECR_ACCOUNT_URL}/${SERVICE_NAME}-${VENDOR_NAME}-repository:${CIRCLE_SHA1}
            docker push ${AWS_ECR_ACCOUNT_URL}/${SERVICE_NAME}-${VENDOR_NAME}:${CIRCLE_SHA1}

  # GitOpsのため，microservices-infrastructureリポジトリにプルリクエストを作成します．
  create_pull_request_for_gitops:
    parameters:
      exr:
        type: executor
    executor: << parameters.exr >>
    steps:
      - github-cli/setup
      - github-cli/clone:
          repo: git@github.com:hiroki-it/microservices-infrastructure.git
      - run:
          name: Edit manifest file
          command: |
            wget -q https://github.com/mikefarah/yq/releases/download/v4.16.2/yq_linux_386
            sudo mv yq_linux_386 /usr/local/bin/yq
            sudo chmod +x /usr/local/bin/yq
            yq -i '.spec.template.spec.containers[0].image = "${SERVICE_NAME}-${VENDOR_NAME}:${CIRCLE_SHA1:0:7}"' \
              ./kubernetes/${SERVICE_NAME}/app/deployment.yml 
      - add_ssh_keys:
          fingerprints:
            - $SSH_KEY_FINGERPRINT
      - run:
          name: Commit manifest file
          command: |
            git config --global user.email "hasegawafeedshop@gmail.com"
            git config --global user.name "circleci"
            git remote set-url --push origin git@github.com:hiroki-it/microservices-infrastructure.git
            git checkout -b release/${CIRCLE_SHA1:0:7}
            git add .
            git commit -m "release ${CIRCLE_SHA1:0:7} by GitOps"
            git push origin HEAD
      - run:
          name: Create Pull Request for GitOps
          command: |
            gh pr create -t "GitOpsによるリリース" -b "イメージのタグを最新のハッシュ値に変更します（${CIRCLE_SHA1:0:7}）"

workflows:
  # mainブランチフロー
  main:
    jobs:

      # accountサービス
      - build_account:
          name: build_account
          exr:
            name: build_executor
            service_name: account
          filters:
            branches:
              only: main
      - push:
          name: push_account
          exr:
            name: push_executor
            service_name: account
            vendor_name: gin
          requires:
            - build_account
      - create_pull_request_for_gitops:
          name: create_pull_request_for_gitops_account
          exr:
            name: create_pull_request_for_gitops_executor
            service_name: account
            vendor_name: gin
          requires:
            - push_account

      # accountサービス
      - build_customer:
          name: build_customer
          exr:
            name: build_executor
            service_name: customer
          filters:
            branches:
              only: main
      - push:
          name: push_customer
          exr:
            name: push_executor
            service_name: customer
            vendor_name: fastapi
          requires:
            - build_customer
      - create_pull_request_for_gitops:
          name: create_pull_request_for_gitops_customer
          exr:
            name: create_pull_request_for_gitops_executor
            service_name: customer
            vendor_name: fastapi
          requires:
            - push_customer

      # orchestratorサービス
      - build_orchestrator:
          name: build_orchestrator
          exr:
            name: build_executor
            service_name: orchestrator
          filters:
            branches:
              only: main
      - push:
          name: push_orchestrator
          exr:
            name: push_executor
            service_name: orchestrator
            vendor_name: fastapi
          requires:
            - build_orchestrator
      - create_pull_request_for_gitops:
          name: create_pull_request_for_gitops_orchestrator
          exr:
            name: create_pull_request_for_gitops_executor
            service_name: orchestrator
            vendor_name: fastapi
          requires:
            - push_orchestrator

      # orderサービス
      - build_order:
          name: build_order
          exr:
            name: build_executor
            service_name: order
          filters:
            branches:
              only: main
      - push:
          name: push_order_lumen
          exr:
            name: push_executor
            service_name: order
            vendor_name: lumen
          requires:
            - build_order
      - push:
          name: push_order_nginx
          exr:
            name: push_executor
            service_name: order
            vendor_name: nginx
          requires:
            - build_order
      - create_pull_request_for_gitops:
          name: create_pull_request_for_gitops_order_lumen
          exr:
            name: create_pull_request_for_gitops_executor
            service_name: order
            vendor_name: lumen
          requires:
            - push_order_lumen
      - create_pull_request_for_gitops:
          name: create_pull_request_for_gitops_order_nginx
          exr:
            name: create_pull_request_for_gitops_executor
            service_name: order
            vendor_name: nginx
          requires:
            - push_order_nginx
